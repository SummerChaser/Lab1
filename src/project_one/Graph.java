//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Graph.java
//  @ Date : 2017/11/25
//  @ Author : 
//
//




public class Graph {
	protected int wordNum = 0;
	protected List<String> wordList = null;
	protected int[][] E = null;
	protected BridgeWord is included in;
	protected String FindMinPath(String word1, String word2) {
		if (wordList.contains(word1) && wordList.contains(word2)) {
            System.out.println("The path " + word1 + " to " + word2 + " is :");
            int start = wordList.indexOf(word1);
            int end = wordList.indexOf(word2);
            if (D[start][end] != INFINITY) {
                pathWay.append(word1 + " -> ");
                getPath(start, end);
                pathWay.append(word2);
                String py = pathWay.toString();
                pathWay.delete(0, pathWay.length());
                return py;
            } else {
                return "no access";
            }
        } else {
            return "input error";
        }
	
	}
	
	protected String RandomWalk(String word) {
		int ranNum = (int) Math.round(Math.random() * (wordNum - 1));
        String ranWord = wordList.get(ranNum);
        randomPath.append(ranWord);
        System.out.println("System choose -> " + ranWord + "\nRandom walk is ï¼š");
        walkFrom(ranNum);
        String rp = randomPath.toString();
        randomPath.delete(0, randomPath.length());
        return rp;
	
	}
	
	protected Graph CreateAndShowGraph(Graph graph) {
		int preNum, curNum, i, j;
        String pre = "#";
        for (String word : TxtWordArray) {
            if (pre != "#") {
                preNum = wordList.indexOf(pre);
                curNum = wordList.indexOf(word);
                E[preNum][curNum]++;
                pre = word;
            } else {
                pre = word;
            }
        }
        for (i = 0; i < wordNum; i++) {
            for (j = 0; j < wordNum; j++) {
                if (E[i][j] == 0) {
                    E[i][j] = INFINITY;
                } else {
                }
            }
        }	
	}
	for (int i = 0; i < graph.wordNum; i++) {
            for (int j = 0; j < graph.wordNum; j++) {
                if (E[i][j] != INFINITY) {
                    String word1 = graph.wordList.get(i);
                    String word2 = graph.wordList.get(j);
                    //System.out.printf("Edge: " + word1 + " --> " + word2 + "   Weigth: %d\n", E[i][j]);
                }
            }
        }
}
