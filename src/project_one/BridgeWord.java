//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : BridgeWord.java
//  @ Date : 2017/11/25
//  @ Author :
//
//


public class BridgeWord {
    protected HashMap<String,List<String>> createBridgeWordMap(String[] TxtWordArray) {
        int i;
        for (i = 0; i < TxtWordArray.length - 2; i++) {
            String key = TxtWordArray[i] + "#" + TxtWordArray[i + 2];
            if (map.containsKey(key)) {
                map.get(key).add(TxtWordArray[i + 1]);
            } else {
                List<String> valueList = new ArrayList<String>();
                valueList.add(TxtWordArray[i + 1]);
                map.put(key, valueList);
            }
        }
    }

    protected String queryBridgeWord(String word1, String word2) {
        if (!(wordList.contains(word1) && wordList.contains(word2))) {
            if (wordList.contains(word1)) {
                return "No \""+word2+"\" in the graph!";
            }else if (wordList.contains(word2)) {
                return "No \""+word1+"\" in the graph!";
            }else {c
                return "No \""+word1+"\" and \""+word2+"\" in the graph!";
            }
        }else if (wordList.contains(word1) && wordList.contains(word2)) {
            String key = word1 + "#" + word2;
            
            if (!map.containsKey(key)) {
                return "No bridge words from \""+word1+ "\" to \""+word2+"\"!";
            } else {
                StringBuffer result = new StringBuffer("The bridge words from \"" + word1 + "\" to \"" + word2 + "\" is:");
                for (String bridge : map.get(key)) {
                    result.append(bridge + " ");
                }
                return result.toString();
            }
        }else {
            return "input error";
        } 


    }

    protected String findMindPath(String word1, String word2) {
        if (wordList.contains(word1) && wordList.contains(word2)) {
            System.out.println("The path " + word1 + " to " + word2 + " is :");
            int start = wordList.indexOf(word1);
            int end = wordList.indexOf(word2);
            if (D[start][end] != INFINITY) {
                pathWay.append(word1 + " -> ");
                getPath(start, end);
                pathWay.append(word2);
                String py = pathWay.toString();
                pathWay.delete(0, pathWay.length());
                return py;
            } else {
                return "no access";
            }
        } else {
            return "input error";
        }

    }

    protected String CreateNewText(String originText) {
        int i;
        String[] TextWord = inputText.toLowerCase().trim().split("\\s+");
        StringBuffer newText = new StringBuffer();
        newText.append(TextWord[0] + " ");
        System.out.println("New text created is ï¼š");
        for (i = 0; i < TextWord.length - 1; i++) {
            String key = TextWord[i] + "#" + TextWord[i + 1];
            if (map.containsKey(key)) {
                String bridge = map.get(key).get(0);
                newText.append(bridge + " " + TextWord[i + 1] + " ");
            } else {
                newText.append(TextWord[i + 1] + " ");
            }
        }
        return newText.toString();

    }
}
